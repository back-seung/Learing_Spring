package hello.core.beanFind;import hello.core.AppConfig;import hello.core.member.MemberService;import hello.core.member.MemberServiceImpl;import org.junit.jupiter.api.DisplayName;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.NoSuchBeanDefinitionException;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import static org.assertj.core.api.Assertions.*;import static org.junit.jupiter.api.Assertions.assertThrows;public class ApplicationContextBasicFindTest {    AnnotationConfigApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.class);    @Test    @DisplayName("빈 이름으로 조회")    void findBeanByName() {        MemberService memberService = ac.getBean("memberService", MemberService.class);        assertThat(memberService).isInstanceOf(MemberServiceImpl.class);    }    @Test    @DisplayName("이름없이 타입으로 조회")    void findBeanByType() {        MemberService memberService = ac.getBean(MemberService.class);        assertThat(memberService).isInstanceOf(MemberServiceImpl.class);    }    @Test    @DisplayName("구체 타입으로 타입으로 조회")    void findBeanByName2() {        MemberService memberService = ac.getBean(MemberServiceImpl.class); // 구현에 의존하는 것은 좋지 않다. 역할에 의존하는 것이 좋다.        assertThat(memberService).isInstanceOf(MemberServiceImpl.class);    }    // 테스트는 항상 실패테스트를 만들어봐야 한다.    @Test    @DisplayName("빈 이름으로 조회가 안된다")    void findBeanByNameX() {//        MemberService xxxxx = ac.getBean("xxxxx", MemberService.class); 주석이 풀리면 테스트는 실패한다.        assertThrows(NoSuchBeanDefinitionException.class,                () -> ac.getBean("xxxxx", MemberService.class));    }}